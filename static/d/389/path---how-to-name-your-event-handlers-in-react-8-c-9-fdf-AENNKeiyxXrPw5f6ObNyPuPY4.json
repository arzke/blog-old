{"data":{"site":{"siteMetadata":{"title":"Blog","author":"Bruno Arsene"}},"markdownRemark":{"id":"3881c2b9-e22a-5bbe-8c0c-958c2e2c020f","excerpt":"Code examples can be confusing and misleading, especially when we assume they’re following some kind of best practices \nand that we can blindly rely on them…","html":"<p>Code examples can be confusing and misleading, especially when we assume they’re following some kind of best practices\nand that we can blindly rely on them.\nBut we must keep in mind that code samples are not meant to be clean, but rather to demonstrate something with the\nminimal amount of code.</p>\n<p>Therefore, considering that examples show us the right way to do something\nis not relevant. One good illustration of this is how people usually name event handlers\nin React. Here is a piece of code <a href=\"https://reactjs.org/docs/handling-events.html\">you might be familiar with</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This function does something</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The name of the component and the label of the button have been\ndeliberately set to Foo because they’re not relevant to the point I’m making here.</p>\n<h2>So what is wrong with this example?</h2>\n<p>The problem here is that <strong>handleClick doesn’t reveal anything about what the function does</strong>.\nInstead, it tells us how the function is used. Still, it happens that when you ask someone why they name\ntheir handler this way, the answer you get is “everybody does this”. Unfortunately, <a href=\"https://en.wikipedia.org/wiki/Argumentum_ad_populum\">this cannot be considered a valid\nargument</a>.</p>\n<p>You might remember from Uncle Bob’s <em>Clean Code</em> the following rule:</p>\n<blockquote>\n<p>Write explicit code – naming variables and methods can reveal the entire intent of the code</p>\n</blockquote>\n<p>Here, our code is not explicit. We know that <em>something</em> is happening when clicking the button, but we have\nno idea <em>what</em> it is.</p>\n<p>Another problem here is that we’re tightly coupling the function to its caller, meaning that\nif we decide to perform the same action on a different event, we have to\nrename the function. This would make no sense as the body of the function hasn’t changed.</p>\n<p>Finally, what should we do if our component renders two buttons with different click handlers? How should we name them?</p>\n<h2>The solution</h2>\n<p>Name your function after what it does.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">clearForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This function does something</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MySuperComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>clearForm<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Event handlers are nothing more than functions, so here the same rules apply for the naming.\nReceiving an event in their parameters does not make them any special.\nIf in the future your function does something different then it makes perfect sense\nto rename it. </p>\n<h2>Conclusion</h2>\n<p>Finding a good name that reveals the intent of your code is often tricky. But using a\nname that is too generic or doesn’t answer the <em>what</em> is by no means better.\nEverything that is said in this post might seem obvious, but I’m still surprised to see how many people keep using\nbad names for their handlers even in production code. This is a quick win.</p>","frontmatter":{"title":"How to name your event handlers in React","date":"March 13, 2019","description":"There might be a better naming than handleClick"}}},"pageContext":{"slug":"/how-to-name-your-event-handlers-in-react/","previous":null,"next":null}}